{"version":3,"file":"MarkdownPanel-4a4f4b28.js","sources":["../../../plugins/com.msgbyte.mdpanel/src/group/MarkdownPanel.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport {\n  GroupExtraDataPanel,\n  Markdown,\n  MarkdownEditor,\n} from '@capital/component';\nimport styled from 'styled-components';\nimport { Translate } from '../translate';\n\nconst MainContent = styled.div`\n  padding: 10px;\n`;\n\nconst EditModalContent = styled.div`\n  padding: 10px;\n  width: 80vw;\n  height: 80vh;\n  display: flex;\n  flex-direction: column;\n  overflow: hidden;\n\n  .main {\n    flex: 1;\n    overflow: hidden;\n\n    > div {\n      height: 100%;\n\n      > .bytemd {\n        height: 100%;\n      }\n    }\n  }\n`;\n\nconst MarkdownEditorRender: React.FC<{ dataMap: Record<string, string> }> =\n  React.memo((props) => {\n    const [text, setText] = useState(() => props.dataMap['markdown']);\n\n    useEffect(() => {\n      props.dataMap['markdown'] = text;\n    }, [text]);\n\n    return (\n      <MarkdownEditor value={text} onChange={(val: string) => setText(val)} />\n    );\n  });\nMarkdownEditorRender.displayName = 'MarkdownEditorRender';\n\nconst MarkdownPanel: React.FC = React.memo(() => {\n  return (\n    <GroupExtraDataPanel\n      names={['markdown']}\n      render={(dataMap: Record<string, string>) => {\n        return (\n          <MainContent>\n            <Markdown raw={dataMap['markdown'] ?? ''} />\n          </MainContent>\n        );\n      }}\n      renderEdit={(dataMap: Record<string, string>) => {\n        return (\n          <EditModalContent>\n            <div>{Translate.editTip}</div>\n\n            <div className=\"main\">\n              <MarkdownEditorRender dataMap={dataMap} />\n            </div>\n          </EditModalContent>\n        );\n      }}\n    />\n  );\n});\nMarkdownPanel.displayName = 'MarkdownPanel';\n\nexport default MarkdownPanel;\n"],"names":["styled","React","useState","useEffect","MarkdownEditor","GroupExtraDataPanel","Markdown","Translate"],"mappings":";;;;;;;EASA,MAAM,cAAcA,0BAAO,CAAA,GAAA,CAAA;AAAA;AAAA,CAAA,CAAA;EAI3B,MAAM,mBAAmBA,0BAAO,CAAA,GAAA,CAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAA,CAAA;EAsBhC,MAAM,oBACJ,GAAAC,yBAAA,CAAM,IAAK,CAAA,CAAC,KAAU,KAAA;EACpB,EAAA,MAAM,CAAC,IAAM,EAAA,OAAA,CAAA,GAAWC,cAAS,CAAA,MAAM,MAAM,OAAQ,CAAA,UAAA,CAAA,CAAA,CAAA;EAErD,EAAAC,eAAA,CAAU,MAAM;EACd,IAAA,KAAA,CAAM,QAAQ,UAAc,CAAA,GAAA,IAAA,CAAA;EAAA,GAAA,EAC3B,CAAC,IAAA,CAAA,CAAA,CAAA;EAEJ,EAAA,+DACGC,wBAAD,EAAA;EAAA,IAAgB,KAAO,EAAA,IAAA;EAAA,IAAM,QAAA,EAAU,CAAC,GAAA,KAAgB,OAAQ,CAAA,GAAA,CAAA;EAAA,GAAA,CAAA,CAAA;EAAA,CAAA,CAAA,CAAA;EAGtE,oBAAA,CAAqB,WAAc,GAAA,sBAAA,CAAA;AAE7B,QAAA,aAAA,GAA0BH,yBAAM,CAAA,IAAA,CAAK,MAAM;EAC/C,EAAA,+DACGI,6BAAD,EAAA;EAAA,IACE,OAAO,CAAC,UAAA,CAAA;EAAA,IACR,MAAA,EAAQ,CAAC,OAAoC,KAAA;EArDnD,MAAA,IAAA,EAAA,CAAA;EAsDQ,MAAA,uBACGJ,yBAAA,CAAA,aAAA,CAAA,WAAA,EAAD,IACE,kBAAAA,yBAAA,CAAA,aAAA,CAACK,kBAAD,EAAA;EAAA,QAAU,GAAA,EAAK,CAAQ,EAAA,GAAA,OAAA,CAAA,UAAA,CAAA,KAAR,IAAuB,GAAA,EAAA,GAAA,EAAA;EAAA,OAAA,CAAA,CAAA,CAAA;EAAA,KAAA;EAAA,IAI5C,UAAA,EAAY,CAAC,OAAoC,KAAA;EAC/C,MACE,uBAAAL,yBAAA,CAAA,aAAA,CAAC,kBAAD,IACE,kBAAAA,yBAAA,CAAA,aAAA,CAAC,OAAD,IAAM,EAAAM,eAAA,CAAU,OAEhB,CAAA,kBAAAN,yBAAA,CAAA,aAAA,CAAC,KAAD,EAAA;EAAA,QAAK,SAAU,EAAA,MAAA;EAAA,OAAA,0DACZ,oBAAD,EAAA;EAAA,QAAsB,OAAA;EAAA,OAAA,CAAA,CAAA,CAAA,CAAA;EAAA,KAAA;EAAA,GAAA,CAAA,CAAA;EAAA,CAAA,EAAA;EAQpC,aAAA,CAAc,WAAc,GAAA,eAAA;;;;;;;;"}